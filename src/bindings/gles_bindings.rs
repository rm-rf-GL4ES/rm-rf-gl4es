/* automatically generated by rust-bindgen 0.69.2 */

pub const __gles1_gl_h_: u32 = 1;
pub const _VCRT_COMPILER_PREPROCESSOR: u32 = 1;
pub const _SAL_VERSION: u32 = 20;
pub const __SAL_H_VERSION: u32 = 180000000;
pub const _USE_DECLSPECS_FOR_SAL: u32 = 0;
pub const _USE_ATTRIBUTES_FOR_SAL: u32 = 0;
pub const _CRT_PACKING: u32 = 8;
pub const _HAS_EXCEPTIONS: u32 = 1;
pub const _STL_LANG: u32 = 0;
pub const _HAS_CXX17: u32 = 0;
pub const _HAS_CXX20: u32 = 0;
pub const _HAS_CXX23: u32 = 0;
pub const _HAS_NODISCARD: u32 = 0;
pub const WCHAR_MIN: u32 = 0;
pub const WCHAR_MAX: u32 = 65535;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 65535;
pub const KHRONOS_SUPPORT_INT64: u32 = 1;
pub const KHRONOS_SUPPORT_FLOAT: u32 = 1;
pub const KHRONOS_MAX_ENUM: u32 = 2147483647;
pub const GL_VERSION_ES_CM_1_0: u32 = 1;
pub const GL_VERSION_ES_CL_1_0: u32 = 1;
pub const GL_VERSION_ES_CM_1_1: u32 = 1;
pub const GL_VERSION_ES_CL_1_1: u32 = 1;
pub const GL_DEPTH_BUFFER_BIT: u32 = 256;
pub const GL_STENCIL_BUFFER_BIT: u32 = 1024;
pub const GL_COLOR_BUFFER_BIT: u32 = 16384;
pub const GL_FALSE: u32 = 0;
pub const GL_TRUE: u32 = 1;
pub const GL_POINTS: u32 = 0;
pub const GL_LINES: u32 = 1;
pub const GL_LINE_LOOP: u32 = 2;
pub const GL_LINE_STRIP: u32 = 3;
pub const GL_TRIANGLES: u32 = 4;
pub const GL_TRIANGLE_STRIP: u32 = 5;
pub const GL_TRIANGLE_FAN: u32 = 6;
pub const GL_NEVER: u32 = 512;
pub const GL_LESS: u32 = 513;
pub const GL_EQUAL: u32 = 514;
pub const GL_LEQUAL: u32 = 515;
pub const GL_GREATER: u32 = 516;
pub const GL_NOTEQUAL: u32 = 517;
pub const GL_GEQUAL: u32 = 518;
pub const GL_ALWAYS: u32 = 519;
pub const GL_ZERO: u32 = 0;
pub const GL_ONE: u32 = 1;
pub const GL_SRC_COLOR: u32 = 768;
pub const GL_ONE_MINUS_SRC_COLOR: u32 = 769;
pub const GL_SRC_ALPHA: u32 = 770;
pub const GL_ONE_MINUS_SRC_ALPHA: u32 = 771;
pub const GL_DST_ALPHA: u32 = 772;
pub const GL_ONE_MINUS_DST_ALPHA: u32 = 773;
pub const GL_DST_COLOR: u32 = 774;
pub const GL_ONE_MINUS_DST_COLOR: u32 = 775;
pub const GL_SRC_ALPHA_SATURATE: u32 = 776;
pub const GL_CLIP_PLANE0: u32 = 12288;
pub const GL_CLIP_PLANE1: u32 = 12289;
pub const GL_CLIP_PLANE2: u32 = 12290;
pub const GL_CLIP_PLANE3: u32 = 12291;
pub const GL_CLIP_PLANE4: u32 = 12292;
pub const GL_CLIP_PLANE5: u32 = 12293;
pub const GL_FRONT: u32 = 1028;
pub const GL_BACK: u32 = 1029;
pub const GL_FRONT_AND_BACK: u32 = 1032;
pub const GL_FOG: u32 = 2912;
pub const GL_LIGHTING: u32 = 2896;
pub const GL_TEXTURE_2D: u32 = 3553;
pub const GL_CULL_FACE: u32 = 2884;
pub const GL_ALPHA_TEST: u32 = 3008;
pub const GL_BLEND: u32 = 3042;
pub const GL_COLOR_LOGIC_OP: u32 = 3058;
pub const GL_DITHER: u32 = 3024;
pub const GL_STENCIL_TEST: u32 = 2960;
pub const GL_DEPTH_TEST: u32 = 2929;
pub const GL_POINT_SMOOTH: u32 = 2832;
pub const GL_LINE_SMOOTH: u32 = 2848;
pub const GL_SCISSOR_TEST: u32 = 3089;
pub const GL_COLOR_MATERIAL: u32 = 2903;
pub const GL_NORMALIZE: u32 = 2977;
pub const GL_RESCALE_NORMAL: u32 = 32826;
pub const GL_VERTEX_ARRAY: u32 = 32884;
pub const GL_NORMAL_ARRAY: u32 = 32885;
pub const GL_COLOR_ARRAY: u32 = 32886;
pub const GL_TEXTURE_COORD_ARRAY: u32 = 32888;
pub const GL_MULTISAMPLE: u32 = 32925;
pub const GL_SAMPLE_ALPHA_TO_COVERAGE: u32 = 32926;
pub const GL_SAMPLE_ALPHA_TO_ONE: u32 = 32927;
pub const GL_SAMPLE_COVERAGE: u32 = 32928;
pub const GL_NO_ERROR: u32 = 0;
pub const GL_INVALID_ENUM: u32 = 1280;
pub const GL_INVALID_VALUE: u32 = 1281;
pub const GL_INVALID_OPERATION: u32 = 1282;
pub const GL_STACK_OVERFLOW: u32 = 1283;
pub const GL_STACK_UNDERFLOW: u32 = 1284;
pub const GL_OUT_OF_MEMORY: u32 = 1285;
pub const GL_EXP: u32 = 2048;
pub const GL_EXP2: u32 = 2049;
pub const GL_FOG_DENSITY: u32 = 2914;
pub const GL_FOG_START: u32 = 2915;
pub const GL_FOG_END: u32 = 2916;
pub const GL_FOG_MODE: u32 = 2917;
pub const GL_FOG_COLOR: u32 = 2918;
pub const GL_CW: u32 = 2304;
pub const GL_CCW: u32 = 2305;
pub const GL_CURRENT_COLOR: u32 = 2816;
pub const GL_CURRENT_NORMAL: u32 = 2818;
pub const GL_CURRENT_TEXTURE_COORDS: u32 = 2819;
pub const GL_POINT_SIZE: u32 = 2833;
pub const GL_POINT_SIZE_MIN: u32 = 33062;
pub const GL_POINT_SIZE_MAX: u32 = 33063;
pub const GL_POINT_FADE_THRESHOLD_SIZE: u32 = 33064;
pub const GL_POINT_DISTANCE_ATTENUATION: u32 = 33065;
pub const GL_SMOOTH_POINT_SIZE_RANGE: u32 = 2834;
pub const GL_LINE_WIDTH: u32 = 2849;
pub const GL_SMOOTH_LINE_WIDTH_RANGE: u32 = 2850;
pub const GL_ALIASED_POINT_SIZE_RANGE: u32 = 33901;
pub const GL_ALIASED_LINE_WIDTH_RANGE: u32 = 33902;
pub const GL_CULL_FACE_MODE: u32 = 2885;
pub const GL_FRONT_FACE: u32 = 2886;
pub const GL_SHADE_MODEL: u32 = 2900;
pub const GL_DEPTH_RANGE: u32 = 2928;
pub const GL_DEPTH_WRITEMASK: u32 = 2930;
pub const GL_DEPTH_CLEAR_VALUE: u32 = 2931;
pub const GL_DEPTH_FUNC: u32 = 2932;
pub const GL_STENCIL_CLEAR_VALUE: u32 = 2961;
pub const GL_STENCIL_FUNC: u32 = 2962;
pub const GL_STENCIL_VALUE_MASK: u32 = 2963;
pub const GL_STENCIL_FAIL: u32 = 2964;
pub const GL_STENCIL_PASS_DEPTH_FAIL: u32 = 2965;
pub const GL_STENCIL_PASS_DEPTH_PASS: u32 = 2966;
pub const GL_STENCIL_REF: u32 = 2967;
pub const GL_STENCIL_WRITEMASK: u32 = 2968;
pub const GL_MATRIX_MODE: u32 = 2976;
pub const GL_VIEWPORT: u32 = 2978;
pub const GL_MODELVIEW_STACK_DEPTH: u32 = 2979;
pub const GL_PROJECTION_STACK_DEPTH: u32 = 2980;
pub const GL_TEXTURE_STACK_DEPTH: u32 = 2981;
pub const GL_MODELVIEW_MATRIX: u32 = 2982;
pub const GL_PROJECTION_MATRIX: u32 = 2983;
pub const GL_TEXTURE_MATRIX: u32 = 2984;
pub const GL_ALPHA_TEST_FUNC: u32 = 3009;
pub const GL_ALPHA_TEST_REF: u32 = 3010;
pub const GL_BLEND_DST: u32 = 3040;
pub const GL_BLEND_SRC: u32 = 3041;
pub const GL_LOGIC_OP_MODE: u32 = 3056;
pub const GL_SCISSOR_BOX: u32 = 3088;
pub const GL_COLOR_CLEAR_VALUE: u32 = 3106;
pub const GL_COLOR_WRITEMASK: u32 = 3107;
pub const GL_MAX_LIGHTS: u32 = 3377;
pub const GL_MAX_CLIP_PLANES: u32 = 3378;
pub const GL_MAX_TEXTURE_SIZE: u32 = 3379;
pub const GL_MAX_MODELVIEW_STACK_DEPTH: u32 = 3382;
pub const GL_MAX_PROJECTION_STACK_DEPTH: u32 = 3384;
pub const GL_MAX_TEXTURE_STACK_DEPTH: u32 = 3385;
pub const GL_MAX_VIEWPORT_DIMS: u32 = 3386;
pub const GL_MAX_TEXTURE_UNITS: u32 = 34018;
pub const GL_SUBPIXEL_BITS: u32 = 3408;
pub const GL_RED_BITS: u32 = 3410;
pub const GL_GREEN_BITS: u32 = 3411;
pub const GL_BLUE_BITS: u32 = 3412;
pub const GL_ALPHA_BITS: u32 = 3413;
pub const GL_DEPTH_BITS: u32 = 3414;
pub const GL_STENCIL_BITS: u32 = 3415;
pub const GL_POLYGON_OFFSET_UNITS: u32 = 10752;
pub const GL_POLYGON_OFFSET_FILL: u32 = 32823;
pub const GL_POLYGON_OFFSET_FACTOR: u32 = 32824;
pub const GL_TEXTURE_BINDING_2D: u32 = 32873;
pub const GL_VERTEX_ARRAY_SIZE: u32 = 32890;
pub const GL_VERTEX_ARRAY_TYPE: u32 = 32891;
pub const GL_VERTEX_ARRAY_STRIDE: u32 = 32892;
pub const GL_NORMAL_ARRAY_TYPE: u32 = 32894;
pub const GL_NORMAL_ARRAY_STRIDE: u32 = 32895;
pub const GL_COLOR_ARRAY_SIZE: u32 = 32897;
pub const GL_COLOR_ARRAY_TYPE: u32 = 32898;
pub const GL_COLOR_ARRAY_STRIDE: u32 = 32899;
pub const GL_TEXTURE_COORD_ARRAY_SIZE: u32 = 32904;
pub const GL_TEXTURE_COORD_ARRAY_TYPE: u32 = 32905;
pub const GL_TEXTURE_COORD_ARRAY_STRIDE: u32 = 32906;
pub const GL_VERTEX_ARRAY_POINTER: u32 = 32910;
pub const GL_NORMAL_ARRAY_POINTER: u32 = 32911;
pub const GL_COLOR_ARRAY_POINTER: u32 = 32912;
pub const GL_TEXTURE_COORD_ARRAY_POINTER: u32 = 32914;
pub const GL_SAMPLE_BUFFERS: u32 = 32936;
pub const GL_SAMPLES: u32 = 32937;
pub const GL_SAMPLE_COVERAGE_VALUE: u32 = 32938;
pub const GL_SAMPLE_COVERAGE_INVERT: u32 = 32939;
pub const GL_NUM_COMPRESSED_TEXTURE_FORMATS: u32 = 34466;
pub const GL_COMPRESSED_TEXTURE_FORMATS: u32 = 34467;
pub const GL_DONT_CARE: u32 = 4352;
pub const GL_FASTEST: u32 = 4353;
pub const GL_NICEST: u32 = 4354;
pub const GL_PERSPECTIVE_CORRECTION_HINT: u32 = 3152;
pub const GL_POINT_SMOOTH_HINT: u32 = 3153;
pub const GL_LINE_SMOOTH_HINT: u32 = 3154;
pub const GL_FOG_HINT: u32 = 3156;
pub const GL_GENERATE_MIPMAP_HINT: u32 = 33170;
pub const GL_LIGHT_MODEL_AMBIENT: u32 = 2899;
pub const GL_LIGHT_MODEL_TWO_SIDE: u32 = 2898;
pub const GL_AMBIENT: u32 = 4608;
pub const GL_DIFFUSE: u32 = 4609;
pub const GL_SPECULAR: u32 = 4610;
pub const GL_POSITION: u32 = 4611;
pub const GL_SPOT_DIRECTION: u32 = 4612;
pub const GL_SPOT_EXPONENT: u32 = 4613;
pub const GL_SPOT_CUTOFF: u32 = 4614;
pub const GL_CONSTANT_ATTENUATION: u32 = 4615;
pub const GL_LINEAR_ATTENUATION: u32 = 4616;
pub const GL_QUADRATIC_ATTENUATION: u32 = 4617;
pub const GL_BYTE: u32 = 5120;
pub const GL_UNSIGNED_BYTE: u32 = 5121;
pub const GL_SHORT: u32 = 5122;
pub const GL_UNSIGNED_SHORT: u32 = 5123;
pub const GL_FLOAT: u32 = 5126;
pub const GL_FIXED: u32 = 5132;
pub const GL_CLEAR: u32 = 5376;
pub const GL_AND: u32 = 5377;
pub const GL_AND_REVERSE: u32 = 5378;
pub const GL_COPY: u32 = 5379;
pub const GL_AND_INVERTED: u32 = 5380;
pub const GL_NOOP: u32 = 5381;
pub const GL_XOR: u32 = 5382;
pub const GL_OR: u32 = 5383;
pub const GL_NOR: u32 = 5384;
pub const GL_EQUIV: u32 = 5385;
pub const GL_INVERT: u32 = 5386;
pub const GL_OR_REVERSE: u32 = 5387;
pub const GL_COPY_INVERTED: u32 = 5388;
pub const GL_OR_INVERTED: u32 = 5389;
pub const GL_NAND: u32 = 5390;
pub const GL_SET: u32 = 5391;
pub const GL_EMISSION: u32 = 5632;
pub const GL_SHININESS: u32 = 5633;
pub const GL_AMBIENT_AND_DIFFUSE: u32 = 5634;
pub const GL_MODELVIEW: u32 = 5888;
pub const GL_PROJECTION: u32 = 5889;
pub const GL_TEXTURE: u32 = 5890;
pub const GL_ALPHA: u32 = 6406;
pub const GL_RGB: u32 = 6407;
pub const GL_RGBA: u32 = 6408;
pub const GL_LUMINANCE: u32 = 6409;
pub const GL_LUMINANCE_ALPHA: u32 = 6410;
pub const GL_UNPACK_ALIGNMENT: u32 = 3317;
pub const GL_PACK_ALIGNMENT: u32 = 3333;
pub const GL_UNSIGNED_SHORT_4_4_4_4: u32 = 32819;
pub const GL_UNSIGNED_SHORT_5_5_5_1: u32 = 32820;
pub const GL_UNSIGNED_SHORT_5_6_5: u32 = 33635;
pub const GL_FLAT: u32 = 7424;
pub const GL_SMOOTH: u32 = 7425;
pub const GL_KEEP: u32 = 7680;
pub const GL_REPLACE: u32 = 7681;
pub const GL_INCR: u32 = 7682;
pub const GL_DECR: u32 = 7683;
pub const GL_VENDOR: u32 = 7936;
pub const GL_RENDERER: u32 = 7937;
pub const GL_VERSION: u32 = 7938;
pub const GL_EXTENSIONS: u32 = 7939;
pub const GL_MODULATE: u32 = 8448;
pub const GL_DECAL: u32 = 8449;
pub const GL_ADD: u32 = 260;
pub const GL_TEXTURE_ENV_MODE: u32 = 8704;
pub const GL_TEXTURE_ENV_COLOR: u32 = 8705;
pub const GL_TEXTURE_ENV: u32 = 8960;
pub const GL_NEAREST: u32 = 9728;
pub const GL_LINEAR: u32 = 9729;
pub const GL_NEAREST_MIPMAP_NEAREST: u32 = 9984;
pub const GL_LINEAR_MIPMAP_NEAREST: u32 = 9985;
pub const GL_NEAREST_MIPMAP_LINEAR: u32 = 9986;
pub const GL_LINEAR_MIPMAP_LINEAR: u32 = 9987;
pub const GL_TEXTURE_MAG_FILTER: u32 = 10240;
pub const GL_TEXTURE_MIN_FILTER: u32 = 10241;
pub const GL_TEXTURE_WRAP_S: u32 = 10242;
pub const GL_TEXTURE_WRAP_T: u32 = 10243;
pub const GL_GENERATE_MIPMAP: u32 = 33169;
pub const GL_TEXTURE0: u32 = 33984;
pub const GL_TEXTURE1: u32 = 33985;
pub const GL_TEXTURE2: u32 = 33986;
pub const GL_TEXTURE3: u32 = 33987;
pub const GL_TEXTURE4: u32 = 33988;
pub const GL_TEXTURE5: u32 = 33989;
pub const GL_TEXTURE6: u32 = 33990;
pub const GL_TEXTURE7: u32 = 33991;
pub const GL_TEXTURE8: u32 = 33992;
pub const GL_TEXTURE9: u32 = 33993;
pub const GL_TEXTURE10: u32 = 33994;
pub const GL_TEXTURE11: u32 = 33995;
pub const GL_TEXTURE12: u32 = 33996;
pub const GL_TEXTURE13: u32 = 33997;
pub const GL_TEXTURE14: u32 = 33998;
pub const GL_TEXTURE15: u32 = 33999;
pub const GL_TEXTURE16: u32 = 34000;
pub const GL_TEXTURE17: u32 = 34001;
pub const GL_TEXTURE18: u32 = 34002;
pub const GL_TEXTURE19: u32 = 34003;
pub const GL_TEXTURE20: u32 = 34004;
pub const GL_TEXTURE21: u32 = 34005;
pub const GL_TEXTURE22: u32 = 34006;
pub const GL_TEXTURE23: u32 = 34007;
pub const GL_TEXTURE24: u32 = 34008;
pub const GL_TEXTURE25: u32 = 34009;
pub const GL_TEXTURE26: u32 = 34010;
pub const GL_TEXTURE27: u32 = 34011;
pub const GL_TEXTURE28: u32 = 34012;
pub const GL_TEXTURE29: u32 = 34013;
pub const GL_TEXTURE30: u32 = 34014;
pub const GL_TEXTURE31: u32 = 34015;
pub const GL_ACTIVE_TEXTURE: u32 = 34016;
pub const GL_CLIENT_ACTIVE_TEXTURE: u32 = 34017;
pub const GL_REPEAT: u32 = 10497;
pub const GL_CLAMP_TO_EDGE: u32 = 33071;
pub const GL_LIGHT0: u32 = 16384;
pub const GL_LIGHT1: u32 = 16385;
pub const GL_LIGHT2: u32 = 16386;
pub const GL_LIGHT3: u32 = 16387;
pub const GL_LIGHT4: u32 = 16388;
pub const GL_LIGHT5: u32 = 16389;
pub const GL_LIGHT6: u32 = 16390;
pub const GL_LIGHT7: u32 = 16391;
pub const GL_ARRAY_BUFFER: u32 = 34962;
pub const GL_ELEMENT_ARRAY_BUFFER: u32 = 34963;
pub const GL_ARRAY_BUFFER_BINDING: u32 = 34964;
pub const GL_ELEMENT_ARRAY_BUFFER_BINDING: u32 = 34965;
pub const GL_VERTEX_ARRAY_BUFFER_BINDING: u32 = 34966;
pub const GL_NORMAL_ARRAY_BUFFER_BINDING: u32 = 34967;
pub const GL_COLOR_ARRAY_BUFFER_BINDING: u32 = 34968;
pub const GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING: u32 = 34970;
pub const GL_STATIC_DRAW: u32 = 35044;
pub const GL_DYNAMIC_DRAW: u32 = 35048;
pub const GL_BUFFER_SIZE: u32 = 34660;
pub const GL_BUFFER_USAGE: u32 = 34661;
pub const GL_SUBTRACT: u32 = 34023;
pub const GL_COMBINE: u32 = 34160;
pub const GL_COMBINE_RGB: u32 = 34161;
pub const GL_COMBINE_ALPHA: u32 = 34162;
pub const GL_RGB_SCALE: u32 = 34163;
pub const GL_ADD_SIGNED: u32 = 34164;
pub const GL_INTERPOLATE: u32 = 34165;
pub const GL_CONSTANT: u32 = 34166;
pub const GL_PRIMARY_COLOR: u32 = 34167;
pub const GL_PREVIOUS: u32 = 34168;
pub const GL_OPERAND0_RGB: u32 = 34192;
pub const GL_OPERAND1_RGB: u32 = 34193;
pub const GL_OPERAND2_RGB: u32 = 34194;
pub const GL_OPERAND0_ALPHA: u32 = 34200;
pub const GL_OPERAND1_ALPHA: u32 = 34201;
pub const GL_OPERAND2_ALPHA: u32 = 34202;
pub const GL_ALPHA_SCALE: u32 = 3356;
pub const GL_SRC0_RGB: u32 = 34176;
pub const GL_SRC1_RGB: u32 = 34177;
pub const GL_SRC2_RGB: u32 = 34178;
pub const GL_SRC0_ALPHA: u32 = 34184;
pub const GL_SRC1_ALPHA: u32 = 34185;
pub const GL_SRC2_ALPHA: u32 = 34186;
pub const GL_DOT3_RGB: u32 = 34478;
pub const GL_DOT3_RGBA: u32 = 34479;
pub const GL_OES_compressed_paletted_texture: u32 = 1;
pub const GL_PALETTE4_RGB8_OES: u32 = 35728;
pub const GL_PALETTE4_RGBA8_OES: u32 = 35729;
pub const GL_PALETTE4_R5_G6_B5_OES: u32 = 35730;
pub const GL_PALETTE4_RGBA4_OES: u32 = 35731;
pub const GL_PALETTE4_RGB5_A1_OES: u32 = 35732;
pub const GL_PALETTE8_RGB8_OES: u32 = 35733;
pub const GL_PALETTE8_RGBA8_OES: u32 = 35734;
pub const GL_PALETTE8_R5_G6_B5_OES: u32 = 35735;
pub const GL_PALETTE8_RGBA4_OES: u32 = 35736;
pub const GL_PALETTE8_RGB5_A1_OES: u32 = 35737;
pub const GL_OES_point_size_array: u32 = 1;
pub const GL_POINT_SIZE_ARRAY_OES: u32 = 35740;
pub const GL_POINT_SIZE_ARRAY_TYPE_OES: u32 = 35210;
pub const GL_POINT_SIZE_ARRAY_STRIDE_OES: u32 = 35211;
pub const GL_POINT_SIZE_ARRAY_POINTER_OES: u32 = 35212;
pub const GL_POINT_SIZE_ARRAY_BUFFER_BINDING_OES: u32 = 35743;
pub const GL_OES_point_sprite: u32 = 1;
pub const GL_POINT_SPRITE_OES: u32 = 34913;
pub const GL_COORD_REPLACE_OES: u32 = 34914;
pub const GL_OES_read_format: u32 = 1;
pub const GL_IMPLEMENTATION_COLOR_READ_TYPE_OES: u32 = 35738;
pub const GL_IMPLEMENTATION_COLOR_READ_FORMAT_OES: u32 = 35739;
pub type va_list = *mut ::std::os::raw::c_char;
extern "C" {
    pub fn __va_start(arg1: *mut *mut ::std::os::raw::c_char, ...);
}
pub type __vcrt_bool = bool;
pub type wchar_t = ::std::os::raw::c_ushort;
extern "C" {
    pub fn __security_init_cookie();
}
extern "C" {
    pub fn __security_check_cookie(_StackCookie: usize);
}
extern "C" {
    pub fn __report_gsfailure(_StackCookie: usize) -> !;
}
extern "C" {
    pub static mut __security_cookie: usize;
}
pub type int_least8_t = ::std::os::raw::c_schar;
pub type int_least16_t = ::std::os::raw::c_short;
pub type int_least32_t = ::std::os::raw::c_int;
pub type int_least64_t = ::std::os::raw::c_longlong;
pub type uint_least8_t = ::std::os::raw::c_uchar;
pub type uint_least16_t = ::std::os::raw::c_ushort;
pub type uint_least32_t = ::std::os::raw::c_uint;
pub type uint_least64_t = ::std::os::raw::c_ulonglong;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_int;
pub type int_fast32_t = ::std::os::raw::c_int;
pub type int_fast64_t = ::std::os::raw::c_longlong;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_uint;
pub type uint_fast32_t = ::std::os::raw::c_uint;
pub type uint_fast64_t = ::std::os::raw::c_ulonglong;
pub type intmax_t = ::std::os::raw::c_longlong;
pub type uintmax_t = ::std::os::raw::c_ulonglong;
pub type khronos_int32_t = i32;
pub type khronos_uint32_t = u32;
pub type khronos_int64_t = i64;
pub type khronos_uint64_t = u64;
pub type khronos_int8_t = ::std::os::raw::c_schar;
pub type khronos_uint8_t = ::std::os::raw::c_uchar;
pub type khronos_int16_t = ::std::os::raw::c_short;
pub type khronos_uint16_t = ::std::os::raw::c_ushort;
pub type khronos_intptr_t = isize;
pub type khronos_uintptr_t = usize;
pub type khronos_ssize_t = ::std::os::raw::c_longlong;
pub type khronos_usize_t = ::std::os::raw::c_ulonglong;
pub type khronos_float_t = f32;
pub type khronos_utime_nanoseconds_t = khronos_uint64_t;
pub type khronos_stime_nanoseconds_t = khronos_int64_t;
pub const khronos_boolean_enum_t_KHRONOS_FALSE: khronos_boolean_enum_t = 0;
pub const khronos_boolean_enum_t_KHRONOS_TRUE: khronos_boolean_enum_t = 1;
pub const khronos_boolean_enum_t_KHRONOS_BOOLEAN_ENUM_FORCE_SIZE: khronos_boolean_enum_t =
    2147483647;
pub type khronos_boolean_enum_t = ::std::os::raw::c_int;
pub type GLbyte = khronos_int8_t;
pub type GLclampf = khronos_float_t;
pub type GLshort = khronos_int16_t;
pub type GLushort = khronos_uint16_t;
pub type GLvoid = ::std::os::raw::c_void;
pub type GLenum = ::std::os::raw::c_uint;
pub type GLfloat = khronos_float_t;
pub type GLfixed = khronos_int32_t;
pub type GLuint = ::std::os::raw::c_uint;
pub type GLsizeiptr = khronos_ssize_t;
pub type GLintptr = khronos_intptr_t;
pub type GLbitfield = ::std::os::raw::c_uint;
pub type GLint = ::std::os::raw::c_int;
pub type GLubyte = khronos_uint8_t;
pub type GLboolean = ::std::os::raw::c_uchar;
pub type GLsizei = ::std::os::raw::c_int;
pub type GLclampx = khronos_int32_t;
extern "C" {
    pub fn glAlphaFunc(func: GLenum, ref_: GLfloat);
}
extern "C" {
    pub fn glClearColor(red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat);
}
extern "C" {
    pub fn glClearDepthf(d: GLfloat);
}
extern "C" {
    pub fn glClipPlanef(p: GLenum, eqn: *const GLfloat);
}
extern "C" {
    pub fn glColor4f(red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat);
}
extern "C" {
    pub fn glDepthRangef(n: GLfloat, f: GLfloat);
}
extern "C" {
    pub fn glFogf(pname: GLenum, param: GLfloat);
}
extern "C" {
    pub fn glFogfv(pname: GLenum, params: *const GLfloat);
}
extern "C" {
    pub fn glFrustumf(l: GLfloat, r: GLfloat, b: GLfloat, t: GLfloat, n: GLfloat, f: GLfloat);
}
extern "C" {
    pub fn glGetClipPlanef(plane: GLenum, equation: *mut GLfloat);
}
extern "C" {
    pub fn glGetFloatv(pname: GLenum, data: *mut GLfloat);
}
extern "C" {
    pub fn glGetLightfv(light: GLenum, pname: GLenum, params: *mut GLfloat);
}
extern "C" {
    pub fn glGetMaterialfv(face: GLenum, pname: GLenum, params: *mut GLfloat);
}
extern "C" {
    pub fn glGetTexEnvfv(target: GLenum, pname: GLenum, params: *mut GLfloat);
}
extern "C" {
    pub fn glGetTexParameterfv(target: GLenum, pname: GLenum, params: *mut GLfloat);
}
extern "C" {
    pub fn glLightModelf(pname: GLenum, param: GLfloat);
}
extern "C" {
    pub fn glLightModelfv(pname: GLenum, params: *const GLfloat);
}
extern "C" {
    pub fn glLightf(light: GLenum, pname: GLenum, param: GLfloat);
}
extern "C" {
    pub fn glLightfv(light: GLenum, pname: GLenum, params: *const GLfloat);
}
extern "C" {
    pub fn glLineWidth(width: GLfloat);
}
extern "C" {
    pub fn glLoadMatrixf(m: *const GLfloat);
}
extern "C" {
    pub fn glMaterialf(face: GLenum, pname: GLenum, param: GLfloat);
}
extern "C" {
    pub fn glMaterialfv(face: GLenum, pname: GLenum, params: *const GLfloat);
}
extern "C" {
    pub fn glMultMatrixf(m: *const GLfloat);
}
extern "C" {
    pub fn glMultiTexCoord4f(target: GLenum, s: GLfloat, t: GLfloat, r: GLfloat, q: GLfloat);
}
extern "C" {
    pub fn glNormal3f(nx: GLfloat, ny: GLfloat, nz: GLfloat);
}
extern "C" {
    pub fn glOrthof(l: GLfloat, r: GLfloat, b: GLfloat, t: GLfloat, n: GLfloat, f: GLfloat);
}
extern "C" {
    pub fn glPointParameterf(pname: GLenum, param: GLfloat);
}
extern "C" {
    pub fn glPointParameterfv(pname: GLenum, params: *const GLfloat);
}
extern "C" {
    pub fn glPointSize(size: GLfloat);
}
extern "C" {
    pub fn glPolygonOffset(factor: GLfloat, units: GLfloat);
}
extern "C" {
    pub fn glRotatef(angle: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat);
}
extern "C" {
    pub fn glScalef(x: GLfloat, y: GLfloat, z: GLfloat);
}
extern "C" {
    pub fn glTexEnvf(target: GLenum, pname: GLenum, param: GLfloat);
}
extern "C" {
    pub fn glTexEnvfv(target: GLenum, pname: GLenum, params: *const GLfloat);
}
extern "C" {
    pub fn glTexParameterf(target: GLenum, pname: GLenum, param: GLfloat);
}
extern "C" {
    pub fn glTexParameterfv(target: GLenum, pname: GLenum, params: *const GLfloat);
}
extern "C" {
    pub fn glTranslatef(x: GLfloat, y: GLfloat, z: GLfloat);
}
extern "C" {
    pub fn glActiveTexture(texture: GLenum);
}
extern "C" {
    pub fn glAlphaFuncx(func: GLenum, ref_: GLfixed);
}
extern "C" {
    pub fn glBindBuffer(target: GLenum, buffer: GLuint);
}
extern "C" {
    pub fn glBindTexture(target: GLenum, texture: GLuint);
}
extern "C" {
    pub fn glBlendFunc(sfactor: GLenum, dfactor: GLenum);
}
extern "C" {
    pub fn glBufferData(
        target: GLenum,
        size: GLsizeiptr,
        data: *const ::std::os::raw::c_void,
        usage: GLenum,
    );
}
extern "C" {
    pub fn glBufferSubData(
        target: GLenum,
        offset: GLintptr,
        size: GLsizeiptr,
        data: *const ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn glClear(mask: GLbitfield);
}
extern "C" {
    pub fn glClearColorx(red: GLfixed, green: GLfixed, blue: GLfixed, alpha: GLfixed);
}
extern "C" {
    pub fn glClearDepthx(depth: GLfixed);
}
extern "C" {
    pub fn glClearStencil(s: GLint);
}
extern "C" {
    pub fn glClientActiveTexture(texture: GLenum);
}
extern "C" {
    pub fn glClipPlanex(plane: GLenum, equation: *const GLfixed);
}
extern "C" {
    pub fn glColor4ub(red: GLubyte, green: GLubyte, blue: GLubyte, alpha: GLubyte);
}
extern "C" {
    pub fn glColor4x(red: GLfixed, green: GLfixed, blue: GLfixed, alpha: GLfixed);
}
extern "C" {
    pub fn glColorMask(red: GLboolean, green: GLboolean, blue: GLboolean, alpha: GLboolean);
}
extern "C" {
    pub fn glColorPointer(
        size: GLint,
        type_: GLenum,
        stride: GLsizei,
        pointer: *const ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn glCompressedTexImage2D(
        target: GLenum,
        level: GLint,
        internalformat: GLenum,
        width: GLsizei,
        height: GLsizei,
        border: GLint,
        imageSize: GLsizei,
        data: *const ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn glCompressedTexSubImage2D(
        target: GLenum,
        level: GLint,
        xoffset: GLint,
        yoffset: GLint,
        width: GLsizei,
        height: GLsizei,
        format: GLenum,
        imageSize: GLsizei,
        data: *const ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn glCopyTexImage2D(
        target: GLenum,
        level: GLint,
        internalformat: GLenum,
        x: GLint,
        y: GLint,
        width: GLsizei,
        height: GLsizei,
        border: GLint,
    );
}
extern "C" {
    pub fn glCopyTexSubImage2D(
        target: GLenum,
        level: GLint,
        xoffset: GLint,
        yoffset: GLint,
        x: GLint,
        y: GLint,
        width: GLsizei,
        height: GLsizei,
    );
}
extern "C" {
    pub fn glCullFace(mode: GLenum);
}
extern "C" {
    pub fn glDeleteBuffers(n: GLsizei, buffers: *const GLuint);
}
extern "C" {
    pub fn glDeleteTextures(n: GLsizei, textures: *const GLuint);
}
extern "C" {
    pub fn glDepthFunc(func: GLenum);
}
extern "C" {
    pub fn glDepthMask(flag: GLboolean);
}
extern "C" {
    pub fn glDepthRangex(n: GLfixed, f: GLfixed);
}
extern "C" {
    pub fn glDisable(cap: GLenum);
}
extern "C" {
    pub fn glDisableClientState(array: GLenum);
}
extern "C" {
    pub fn glDrawArrays(mode: GLenum, first: GLint, count: GLsizei);
}
extern "C" {
    pub fn glDrawElements(
        mode: GLenum,
        count: GLsizei,
        type_: GLenum,
        indices: *const ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn glEnable(cap: GLenum);
}
extern "C" {
    pub fn glEnableClientState(array: GLenum);
}
extern "C" {
    pub fn glFinish();
}
extern "C" {
    pub fn glFlush();
}
extern "C" {
    pub fn glFogx(pname: GLenum, param: GLfixed);
}
extern "C" {
    pub fn glFogxv(pname: GLenum, param: *const GLfixed);
}
extern "C" {
    pub fn glFrontFace(mode: GLenum);
}
extern "C" {
    pub fn glFrustumx(l: GLfixed, r: GLfixed, b: GLfixed, t: GLfixed, n: GLfixed, f: GLfixed);
}
extern "C" {
    pub fn glGetBooleanv(pname: GLenum, data: *mut GLboolean);
}
extern "C" {
    pub fn glGetBufferParameteriv(target: GLenum, pname: GLenum, params: *mut GLint);
}
extern "C" {
    pub fn glGetClipPlanex(plane: GLenum, equation: *mut GLfixed);
}
extern "C" {
    pub fn glGenBuffers(n: GLsizei, buffers: *mut GLuint);
}
extern "C" {
    pub fn glGenTextures(n: GLsizei, textures: *mut GLuint);
}
extern "C" {
    pub fn glGetError() -> GLenum;
}
extern "C" {
    pub fn glGetFixedv(pname: GLenum, params: *mut GLfixed);
}
extern "C" {
    pub fn glGetIntegerv(pname: GLenum, data: *mut GLint);
}
extern "C" {
    pub fn glGetLightxv(light: GLenum, pname: GLenum, params: *mut GLfixed);
}
extern "C" {
    pub fn glGetMaterialxv(face: GLenum, pname: GLenum, params: *mut GLfixed);
}
extern "C" {
    pub fn glGetPointerv(pname: GLenum, params: *mut *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn glGetString(name: GLenum) -> *const GLubyte;
}
extern "C" {
    pub fn glGetTexEnviv(target: GLenum, pname: GLenum, params: *mut GLint);
}
extern "C" {
    pub fn glGetTexEnvxv(target: GLenum, pname: GLenum, params: *mut GLfixed);
}
extern "C" {
    pub fn glGetTexParameteriv(target: GLenum, pname: GLenum, params: *mut GLint);
}
extern "C" {
    pub fn glGetTexParameterxv(target: GLenum, pname: GLenum, params: *mut GLfixed);
}
extern "C" {
    pub fn glHint(target: GLenum, mode: GLenum);
}
extern "C" {
    pub fn glIsBuffer(buffer: GLuint) -> GLboolean;
}
extern "C" {
    pub fn glIsEnabled(cap: GLenum) -> GLboolean;
}
extern "C" {
    pub fn glIsTexture(texture: GLuint) -> GLboolean;
}
extern "C" {
    pub fn glLightModelx(pname: GLenum, param: GLfixed);
}
extern "C" {
    pub fn glLightModelxv(pname: GLenum, param: *const GLfixed);
}
extern "C" {
    pub fn glLightx(light: GLenum, pname: GLenum, param: GLfixed);
}
extern "C" {
    pub fn glLightxv(light: GLenum, pname: GLenum, params: *const GLfixed);
}
extern "C" {
    pub fn glLineWidthx(width: GLfixed);
}
extern "C" {
    pub fn glLoadIdentity();
}
extern "C" {
    pub fn glLoadMatrixx(m: *const GLfixed);
}
extern "C" {
    pub fn glLogicOp(opcode: GLenum);
}
extern "C" {
    pub fn glMaterialx(face: GLenum, pname: GLenum, param: GLfixed);
}
extern "C" {
    pub fn glMaterialxv(face: GLenum, pname: GLenum, param: *const GLfixed);
}
extern "C" {
    pub fn glMatrixMode(mode: GLenum);
}
extern "C" {
    pub fn glMultMatrixx(m: *const GLfixed);
}
extern "C" {
    pub fn glMultiTexCoord4x(texture: GLenum, s: GLfixed, t: GLfixed, r: GLfixed, q: GLfixed);
}
extern "C" {
    pub fn glNormal3x(nx: GLfixed, ny: GLfixed, nz: GLfixed);
}
extern "C" {
    pub fn glNormalPointer(type_: GLenum, stride: GLsizei, pointer: *const ::std::os::raw::c_void);
}
extern "C" {
    pub fn glOrthox(l: GLfixed, r: GLfixed, b: GLfixed, t: GLfixed, n: GLfixed, f: GLfixed);
}
extern "C" {
    pub fn glPixelStorei(pname: GLenum, param: GLint);
}
extern "C" {
    pub fn glPointParameterx(pname: GLenum, param: GLfixed);
}
extern "C" {
    pub fn glPointParameterxv(pname: GLenum, params: *const GLfixed);
}
extern "C" {
    pub fn glPointSizex(size: GLfixed);
}
extern "C" {
    pub fn glPolygonOffsetx(factor: GLfixed, units: GLfixed);
}
extern "C" {
    pub fn glPopMatrix();
}
extern "C" {
    pub fn glPushMatrix();
}
extern "C" {
    pub fn glReadPixels(
        x: GLint,
        y: GLint,
        width: GLsizei,
        height: GLsizei,
        format: GLenum,
        type_: GLenum,
        pixels: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn glRotatex(angle: GLfixed, x: GLfixed, y: GLfixed, z: GLfixed);
}
extern "C" {
    pub fn glSampleCoverage(value: GLfloat, invert: GLboolean);
}
extern "C" {
    pub fn glSampleCoveragex(value: GLclampx, invert: GLboolean);
}
extern "C" {
    pub fn glScalex(x: GLfixed, y: GLfixed, z: GLfixed);
}
extern "C" {
    pub fn glScissor(x: GLint, y: GLint, width: GLsizei, height: GLsizei);
}
extern "C" {
    pub fn glShadeModel(mode: GLenum);
}
extern "C" {
    pub fn glStencilFunc(func: GLenum, ref_: GLint, mask: GLuint);
}
extern "C" {
    pub fn glStencilMask(mask: GLuint);
}
extern "C" {
    pub fn glStencilOp(fail: GLenum, zfail: GLenum, zpass: GLenum);
}
extern "C" {
    pub fn glTexCoordPointer(
        size: GLint,
        type_: GLenum,
        stride: GLsizei,
        pointer: *const ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn glTexEnvi(target: GLenum, pname: GLenum, param: GLint);
}
extern "C" {
    pub fn glTexEnvx(target: GLenum, pname: GLenum, param: GLfixed);
}
extern "C" {
    pub fn glTexEnviv(target: GLenum, pname: GLenum, params: *const GLint);
}
extern "C" {
    pub fn glTexEnvxv(target: GLenum, pname: GLenum, params: *const GLfixed);
}
extern "C" {
    pub fn glTexImage2D(
        target: GLenum,
        level: GLint,
        internalformat: GLint,
        width: GLsizei,
        height: GLsizei,
        border: GLint,
        format: GLenum,
        type_: GLenum,
        pixels: *const ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn glTexParameteri(target: GLenum, pname: GLenum, param: GLint);
}
extern "C" {
    pub fn glTexParameterx(target: GLenum, pname: GLenum, param: GLfixed);
}
extern "C" {
    pub fn glTexParameteriv(target: GLenum, pname: GLenum, params: *const GLint);
}
extern "C" {
    pub fn glTexParameterxv(target: GLenum, pname: GLenum, params: *const GLfixed);
}
extern "C" {
    pub fn glTexSubImage2D(
        target: GLenum,
        level: GLint,
        xoffset: GLint,
        yoffset: GLint,
        width: GLsizei,
        height: GLsizei,
        format: GLenum,
        type_: GLenum,
        pixels: *const ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn glTranslatex(x: GLfixed, y: GLfixed, z: GLfixed);
}
extern "C" {
    pub fn glVertexPointer(
        size: GLint,
        type_: GLenum,
        stride: GLsizei,
        pointer: *const ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn glViewport(x: GLint, y: GLint, width: GLsizei, height: GLsizei);
}
extern "C" {
    pub fn glPointSizePointerOES(
        type_: GLenum,
        stride: GLsizei,
        pointer: *const ::std::os::raw::c_void,
    );
}
